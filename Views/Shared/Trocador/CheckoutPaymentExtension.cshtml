@using BTCPayServer.Plugins.Trocador
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inject TrocadorService TrocadorService
@{
    var storeId = ((JObject)JObject.Parse(JsonConvert.SerializeObject(Model)))["StoreId"].Value<string>();
    var settings = await TrocadorService.GetTrocadorForStore(storeId);
}
@if (settings?.Enabled is true)
{
    <template id="trocador-checkout-template">
        <iframe :src="url" style="min-height:600px;width:100%;border:none" allowtransparency="true"></iframe>
    </template>
    <script>
        const markupPercentage = @settings.AmountMarkupPercentage;
        Vue.component("TrocadorCheckout", {
            template: "#trocador-checkout-template",
            props: ["model"],
            computed: {
                url () {
                    return "https://trocador.app/anonpay/?ticker_to=xmr&network_to=Mainnet&amount=0.1&address=89Jb5ZQWpjg5965idsoNA7M5eNDDmqP8jM7cRzJ8xC7cWCNJ5CKjoq7eGxjTqv1wpngNjKuVc7RWJJzpDsxvetiBD1LdB12"
                },
                currency () {
                    return this.model.paymentMethodId;
                },
                settleMethodId () {
                    return this.currency.endsWith('LightningLike') || this.currency.endsWith('LNURLPay')
                        ? 'BTCLN'
                        : this.currency.replace('_BTCLike', '').replace('_MoneroLike', '').replace('_ZcashLike', '').toUpperCase();
                },
                amountQuery () {
                    return this.model.isUnsetTopUp
                        ? ''
                        : `&lockType=true&hideType=true&lockAmount=true&toAmount=${this.amountDue}`;
                },
                amountDue () {
                    return this.model.btcDue * (1 + (markupPercentage / 100));
                }
            }
        });
    </script>
}
